,Reference Article,Citation Marker,Citance Number,Citing Article,Citation Marker Offset,Citation Offset,Citation Text,Reference Offset,Reference Textt,Discourse Facet
0,P05-1013,"Nivre and Nilsson, 2005",1,W05-1505,0,0,"Recent work by Nivre and Nilsson introduces a technique where the projectivization transformation is encoded in the non-terminals of constituents during parsing (Nivre and Nilsson, 2005)",[65],More details on the parsing algorithm can be found in Nivre (2003).,Method_Citation
1,P05-1013,"Nivre and Nilsson, 2005",2,P08-1006,0,0,"1http: //sourceforge.net/projects/mstparser Figure 1: CoNLL-X dependency tree Figure 2: Penn Treebank-style phrase structure tree KSDEP Sagae and Tsujii (2007)? s dependencyparser,2 based on a probabilistic shift-reduce algorithm extended by the pseudo-projective parsing technique (Nivre and Nilsson, 2005)",[1],"In order to realize the full potential of dependency-based syntactic parsing, it is desirable to allow non-projective dependency structures.",Method_Citation
2,P05-1013,"Nivre and Nilsson, 2005",3,W10-1401,0,0,"Bengoetxea and Gojenola (2010) discuss non-projective dependencies in Basque and show that the pseudo-projective transformation of (Nivre and Nilsson, 2005) improves accuracy for dependency parsing of Basque",[30],We assume that the goal in dependency parsing is to construct a labeled dependency graph of the kind depicted in Figure 1.,Method_Citation
3,P05-1013,"Nivre and Nilsson, 2005",4,P12-3029,0,0,"For tree banks with non-projective trees weuse the pseudo-projective parsing technique to trans form the tree bank into projective structures (Nivre and Nilsson, 2005)",[2],"We show how a datadriven deterministic dependency parser, in itself restricted to projective structures, can be combined with graph transformation techniques to produce non-projective structures.",Method_Citation
4,P05-1013,"Nivre and Nilsson, 2005",5,W10-1403,0,0,"It uses graph transformation to handle non-projective trees (Nivre and Nilsson, 2005)",[32],"A graph D = (W, A) is well-formed iff it is acyclic and connected.",Method_Citation
5,P05-1013,"Nivre and Nilsson, 2005",6,D08-1008,0,0,"To simplify implementation, we instead opted for the pseudo-projective approach (Nivre and Nilsson,2005), in which non projective links are lifted upwards in the tree to achieve projectivity, and special trace labels are used to enable recovery of the non projective links at parse time",[89],"The increase is generally higher for PDT than for DDT, which indicates a greater diversity in non-projective constructions.",Method_Citation
6,P05-1013,2005,7,D07-1013,0,0,",wn in O (n) time, producing a projective dependency graph satisfying conditions 1? 4 in section 2.1, possibly after adding arcs (0, i ,lr) for every node i 6= 0 that is a root in the output graph (where lr is a special label for root modifiers) .Nivre and Nilsson (2005) showed how the restriction to projective dependency graphs could be lifted by using graph transformation techniques to pre process training data and post-process parser output, so-called pseudo-projective parsing. To learn transition scores, these systems use discriminative learning methods ,e.g., memory-based learning or support vector machines",[26],"In section 2 we introduce the graph transformation techniques used to projectivize and deprojectivize dependency graphs, and in section 3 we describe the data-driven dependency parser that is the core of our system.",Method_Citation
7,P05-1013,2005,8,D07-1119,0,0,"For handling non-projective relations, Nivre and Nilsson (2005) suggested applying a preprocessing step to a dependency parser, which consists in lifting non-projective arcs to their head repeatedly, until the tree becomes pseudo-projective",[37],"Here we use a slightly different notion of lift, applying to individual arcs and moving their head upwards one step at a time: Intuitively, lifting an arc makes the word wk dependent on the head wi of its original head wj (which is unique in a well-formed dependency graph), unless wj is a root in which case the operation is undefined (but then wj —* wk is necessarily projective if the dependency graph is well-formed).",Method_Citation
8,P05-1013,"Nivre and Nilsson, 2005",9,N07-1050,0,0,"Whereas most of the early approaches were limited to strictly projective dependency structures, where the projection of a syntactic head must be continuous, attention has recently shifted to the analysis of non-projective structures, which are required for linguistically adequate representations, especially in languages with free or flexible word order. The most popular strategy for capturing non projective structures in data-driven dependency parsing is to apply some kind of post-processing to the output of a strictly projective dependency parser, as in pseudo-projective parsing (Nivre and Nilsson, 2005), corrective modeling (Hall and Nova? k, 2005), or approximate non-projective parsing (McDonald and Pereira, 2006)",[109],"We have presented a new method for non-projective dependency parsing, based on a combination of data-driven projective dependency parsing and graph transformation techniques.",Method_Citation
9,P05-1013,"Nivre and Nilsson, 2005",10,W09-1207,0,0,"troduced in (Nivre and Nilsson, 2005) to handle the non-projective languages including Czech, German and English",[17],"There exist a few robust broad-coverage parsers that produce non-projective dependency structures, notably Tapanainen and J¨arvinen (1997) and Wang and Harper (2004) for English, Foth et al. (2004) for German, and Holan (2004) for Czech.",Method_Citation
10,P05-1013,"Nivre and Nilsson, 2005",11,E09-1034,0,0,"non projective (Nivre and Nilsson, 2005), we char ac terise a sense in which the structures appearing in tree banks can be viewed as being only? slightly? ill-nested",[89],"The increase is generally higher for PDT than for DDT, which indicates a greater diversity in non-projective constructions.",Method_Citation
11,P05-1013,"Nivre and Nilsson, 2005",12,W09-1218,0,0,"In order to avoid losing the benefits of higher-order parsing, we considered applying pseudo-projective transformation (Nivre and Nilsson, 2005)",[39],"However, since we want to preserve as much of the original structure as possible, we are interested in finding a transformation that involves a minimal number of lifts.",Method_Citation
12,P05-1013,"Nivre and Nilsson, 2005",13,C08-1081,0,0,"Pseudo-projective parsing for recovering non projective structures (Nivre and Nilsson, 2005)",[16],"Still, from a theoretical point of view, projective parsing of non-projective structures has the drawback that it rules out perfect accuracy even as an asymptotic goal.",Method_Citation
13,P05-1013,2005,14,C08-1081,0,0,"Although the parser only derives projective graphs, the fact that these graphs are labeled allows non-projective dependencies to be captured using the pseudo-projective approach of Nivre and Nilsson (2005) (section 3.4)",[62],"In the experiments below, we employ a data-driven deterministic dependency parser producing labeled projective dependency graphs,3 previously tested on Swedish (Nivre et al., 2004) and English (Nivre and Scholz, 2004).",Method_Citation
14,P05-1013,2005,15,C08-1081,0,0,Pseudo-projective parsing was proposed by Nivreand Nilsson (2005) as a way of dealing with non projective structures in a projective data-driven parser,[20],"In this paper, we show how non-projective dependency parsing can be achieved by combining a datadriven projective parser with special graph transformation techniques.",Method_Citation
15,P05-1013,2005,16,C08-1081,0,0,"Weprojectivize training data by a minimal transformation, lifting non-projective arcs one step at a time, and extending the arc label of lifted arcs using the encoding scheme called HEAD by Nivre and Nilsson (2005), which means that a lifted arc is assigned the label r? h, where r is the original label and h is the label of the original head in the non-projective dependency graph",[51],"In the second scheme, Head+Path, we in addition modify the label of every arc along the lifting path from the syntactic to the linear head so that if the original label is p the new label is p↓.",Method_Citation
16,P05-1013,"Nivre and Nilsson, 2005",17,D11-1006,0,0,"For tree banks with non-projective trees we use the pseudo-projective parsing technique to transform the tree bank into projective structures (Nivre and Nilsson, 2005)",[2],"We show how a datadriven deterministic dependency parser, in itself restricted to projective structures, can be combined with graph transformation techniques to produce non-projective structures.",Method_Citation
17,P05-1013,"Nivre and Nilsson, 2005",18,P11-2121,0,0,"Since the number of non-projective dependencies is much smaller than the number of projective dependencies (Nivre and Nilsson, 2005), it is not efficient to perform non-projective parsing for all cases",[1],"In order to realize the full potential of dependency-based syntactic parsing, it is desirable to allow non-projective dependency structures.",Method_Citation
18,P05-1013,"Nivre and Nilsson, 2005",19,E06-1010,0,0,"Itshould be noted that the proportion of lost dependencies is about twice as high as the proportion of dependencies that are non-projective in them selves (Nivre and Nilsson, 2005)",[30],We assume that the goal in dependency parsing is to construct a labeled dependency graph of the kind depicted in Figure 1.,Method_Citation
19,P05-1013,"Nivre and Nilsson, 2005",20,D07-1111,0,0,"The resulting algorithm is projective, and nonprojectivity is handled by pseudo-projective trans formations as described in (Nivre and Nilsson, 2005)",[111],This work was supported in part by the Swedish Research Council (621-2002-4207).,Method_Citation
